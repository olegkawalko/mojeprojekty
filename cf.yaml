AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Infrastrukturę sieciową do testów ruchu sieciowego
<<<<<<< HEAD
  z ALB, NLB, jedną NAT Gateway, prywatnymi/publicznymi subnetami i EC2.
=======
  z ALB, NLB, jedną NAT Gateway, prywatnymi/publicznymi subnetami i EC2 (Ubuntu user data).
>>>>>>> 0eebb9f (Initial commit)

Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16

Resources:

<<<<<<< HEAD
  # VPC
=======
  # --- VPC ---
>>>>>>> 0eebb9f (Initial commit)
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: TestVPC

<<<<<<< HEAD
  # Internet Gateway
=======
  # --- Internet Gateway ---
>>>>>>> 0eebb9f (Initial commit)
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TestIGW

  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref IGW

<<<<<<< HEAD
  # Public subnets
=======
  # --- Public subnets ---
>>>>>>> 0eebb9f (Initial commit)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

<<<<<<< HEAD
  # Private subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1

=======
  # --- Private subnets ---
>>>>>>> 0eebb9f (Initial commit)
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet3

<<<<<<< HEAD
  # Route Tables
=======
  # --- Public Route Table ---
>>>>>>> 0eebb9f (Initial commit)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

<<<<<<< HEAD
  # Associate public subnets with route table
=======
  # --- Associate public subnets ---
>>>>>>> 0eebb9f (Initial commit)
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

<<<<<<< HEAD
  # Elastic IP for NAT
=======
  # --- NAT Gateway ---
>>>>>>> 0eebb9f (Initial commit)
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

<<<<<<< HEAD
  # NAT Gateway (jedna)
=======
>>>>>>> 0eebb9f (Initial commit)
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NatGateway

<<<<<<< HEAD
  # Private route tables
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

=======
  # --- Private Route Tables ---
>>>>>>> 0eebb9f (Initial commit)
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable3

<<<<<<< HEAD
  # Routes for private subnets
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

=======
  # --- Routes for private subnets ---
>>>>>>> 0eebb9f (Initial commit)
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

<<<<<<< HEAD
  # Associate private subnets
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

=======
  # --- Associate private subnets ---
>>>>>>> 0eebb9f (Initial commit)
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3
<<<<<<< HEAD
      # Brak NAT, subnet izolowany

  # Security Groups
=======

  # --- Security Groups ---
>>>>>>> 0eebb9f (Initial commit)
  PublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/SSH inbound
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  PrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
<<<<<<< HEAD
      GroupDescription: Allow traffic from LB
=======
      GroupDescription: Allow internal LB traffic
>>>>>>> 0eebb9f (Initial commit)
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: 5201
          ToPort: 5201
          CidrIp: 10.0.0.0/16

<<<<<<< HEAD
  # EC2 instances
=======
  # --- EC2 Instances (Ubuntu + Apache2 user data) ---
>>>>>>> 0eebb9f (Initial commit)
  EC2Public1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
<<<<<<< HEAD
      ImageId: ami-0c94855ba95c71c99
=======
      ImageId: ami-0fc5d935ebf8bc3bc  # Ubuntu 22.04 LTS (region-dependent!)
>>>>>>> 0eebb9f (Initial commit)
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref PublicSG
      KeyName: klucz
<<<<<<< HEAD
=======
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt upgrade -y
          apt install -y apache2
          systemctl start apache2
          systemctl enable apache2
          echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
>>>>>>> 0eebb9f (Initial commit)

  EC2Public2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
<<<<<<< HEAD
      ImageId: ami-0c94855ba95c71c99
=======
      ImageId: ami-0fc5d935ebf8bc3bc
>>>>>>> 0eebb9f (Initial commit)
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref PublicSG
      KeyName: klucz
<<<<<<< HEAD
=======
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt install -y apache2
          systemctl start apache2
          echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
>>>>>>> 0eebb9f (Initial commit)

  EC2Private2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
<<<<<<< HEAD
      ImageId: ami-0c94855ba95c71c99
=======
      ImageId: ami-0fc5d935ebf8bc3bc
>>>>>>> 0eebb9f (Initial commit)
      SubnetId: !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref PrivateSG
      KeyName: klucz

  EC2Private3:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
<<<<<<< HEAD
      ImageId: ami-0c94855ba95c71c99
=======
      ImageId: ami-0fc5d935ebf8bc3bc
>>>>>>> 0eebb9f (Initial commit)
      SubnetId: !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref PrivateSG
      KeyName: klucz

<<<<<<< HEAD
  # ALB (Internet-facing)
=======
  # --- ALB (Application Load Balancer) ---
>>>>>>> 0eebb9f (Initial commit)
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: test-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref PublicSG
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: alb-targets
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: "80"
      HealthCheckPath: "/"

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

<<<<<<< HEAD
  # NLB (Internal)
=======
  # --- NLB (Network Load Balancer) ---
>>>>>>> 0eebb9f (Initial commit)
  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: test-nlb
      Subnets:
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Scheme: internal
      Type: network
      IpAddressType: ipv4

  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: nlb-targets
      Port: 5201
      Protocol: TCP
      VpcId: !Ref MyVPC
      TargetType: instance
      HealthCheckProtocol: TCP
      HealthCheckPort: "5201"

  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NLB
      Port: 5201
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBTargetGroup

Outputs:
  VPCId:
    Value: !Ref MyVPC
  ALBDNS:
    Value: !GetAtt ALB.DNSName
  NLBDNS:
    Value: !GetAtt NLB.DNSName
